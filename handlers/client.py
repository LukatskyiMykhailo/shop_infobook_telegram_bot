from aiogram import types, Dispatcher
from create_bot import dp, bot
from keyboards import kb_client, shkb, in_kb
from data_base import sqlite_db
import sqlite3
import aiogram.utils.markdown as fmt


async def command_start(message : types.Message):
	await bot.send_message(message.from_user.id,
		fmt.text(
			fmt.text("–ü—Ä–∏–≤—ñ—Ç ü§ó"),
			fmt.text(""),
			fmt.text("–¶–µ  BIOSKY-–±–æ—Ç ,–∞–±–∏ —Ç–∏ –º–æ–≥–ª–∞ –∑—Ä–æ–±–∏—Ç–∏ —Å–≤–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∑—Ä—É—á–Ω–æ —Ç–∞ —à–≤–∏–¥–∫–æ!"),
			fmt.text(""),
			fmt.text("–ü–æ–¥—ñ–ª–∏—Å—å —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º , —Ç–∞ –æ–±–∏—Ä–∞–π —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –¥–æ–≥–ª—è–¥, —è–∫–∏–π –º–æ–∂–Ω–∞ –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ –¥–ª—è –±—É–¥—å —è–∫–æ–≥–æ —Ç–∏–ø—É –≤–æ–ª–æ—Å—Å—è, –ø—ñ–¥–∫—Ä–µ—Å–ª–∏–≤—à–∏ —Ç–≤–æ—é —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ—Å—Ç—å üíô"),
			sep="\n"), parse_mode="HTML", reply_markup=shkb)
	await message.delete()

async def create_user(phone: str):
    conn = sqlite3.connect('users_num.db')
    cursor = conn.cursor()
    conn.execute('CREATE TABLE IF NOT EXISTS users(phone TEXT)')
    cursor.execute('INSERT OR IGNORE INTO users (phone) VALUES (?)', (phone,))
    conn.commit()
    conn.close()

async def contact_handler(message: types.Message):
	contact = message.contact
	await create_user(contact.phone_number)
	await bot.send_message(message.from_user.id,
		fmt.text(
			fmt.text("–í–∏ —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞–ª–∏—Å—è!"),
			fmt.text("–®–≤–∏–¥–∫–∏–π –ø–æ—à—É–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –≤–∂–µ —Ç—É—Ç!"),
			sep="\n"), parse_mode="HTML", reply_markup=kb_client)

async def open_about(message : types.Message):
	await bot.send_message(message.from_user.id,
	 	fmt.text(
			fmt.text("Biosky - —Ç–≤—ñ–π —Ç—Ä–µ–Ω–¥–æ–≤–∏–π beauty-–µ–∫—Å–ø–µ—Ä—Ç —ñ–∑ –¥–æ–≥–ª—è–¥—É –∑–∞ –≤–æ–ª–æ—Å—Å—è–º."),
			fmt.text(""),
			fmt.text("–Ü—Ç–∞–ª—ñ–π—Å—å–∫–∏–π –±—Ä–µ–Ω–¥ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ—ó –∫–æ—Å–º–µ—Ç–∏–∫–∏ –¥–ª—è –≤–æ–ª–æ—Å—Å—è –≤ —Å–∞–ª–æ–Ω–∞—Ö –£–∫—Ä–∞—ó–Ω–∏."),
			sep="\n"), parse_mode="HTML", reply_markup=kb_client)

async def menu_command(message : types.Message):
	await bot.send_message(message.from_user.id, '–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É:', reply_markup=in_kb)

async def kat_1(message : types.Message):
	await sqlite_db.kat1_read(message)
	await message.answer()

async def kat_2(message : types.Message):
	await sqlite_db.kat2_read(message)
	await message.answer()

async def kat_3(message : types.Message):
	await sqlite_db.kat3_read(message)
	await message.answer()

async def kat_4(message : types.Message):
	await sqlite_db.kat4_read(message)
	await message.answer()

async def kat_5(message : types.Message):
	await sqlite_db.kat5_read(message)
	await message.answer()

async def kat_6(message : types.Message):
	await sqlite_db.kat6_read(message)
	await message.answer()

async def kat_7(message : types.Message):
	await sqlite_db.kat7_read(message)
	await message.answer()

async def kat_8(message : types.Message):
	await sqlite_db.kat8_read(message)
	await message.answer()

async def kat_9(message : types.Message):
	await sqlite_db.kat9_read(message)
	await message.answer()

async def kat_10(message : types.Message):
	await sqlite_db.kat10_read(message)
	await message.answer()

async def kat_11(message : types.Message):
	await sqlite_db.kat11_read(message)
	await message.answer()

async def kat_12(message : types.Message):
	await sqlite_db.kat12_read(message)
	await message.answer()

async def kat_13(message : types.Message):
	await sqlite_db.kat13_read(message)
	await message.answer()

#async def menu_command(message : types.Message):
#	await sqlite_db.sql_read(message)


def register_handlers_client(dp : Dispatcher):
	dp.register_message_handler(command_start, commands=['start'])
	dp.register_message_handler(open_about, commands=['–ì–æ–ª–æ–≤–Ω–µ'])
	dp.register_message_handler(menu_command, commands=['–ö–∞—Ç–∞–ª–æ–≥'])
	#dp.register_message_handler(private_office_handler, commands=['–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏'])
	dp.register_message_handler(contact_handler, content_types=["contact"])
	dp.register_callback_query_handler(kat_1, lambda c: c.data == 'Kat1')
	dp.register_callback_query_handler(kat_2, lambda c: c.data == 'Kat2')
	dp.register_callback_query_handler(kat_3, lambda c: c.data == 'Kat3')
	dp.register_callback_query_handler(kat_4, lambda c: c.data == 'Kat4')
	dp.register_callback_query_handler(kat_5, lambda c: c.data == 'Kat5')
	dp.register_callback_query_handler(kat_6, lambda c: c.data == 'Kat6')
	dp.register_callback_query_handler(kat_7, lambda c: c.data == 'Kat7')
	dp.register_callback_query_handler(kat_8, lambda c: c.data == 'Kat8')
	dp.register_callback_query_handler(kat_9, lambda c: c.data == 'Kat9')
	dp.register_callback_query_handler(kat_10, lambda c: c.data == 'Kat10')
	dp.register_callback_query_handler(kat_11, lambda c: c.data == 'Kat11')
	dp.register_callback_query_handler(kat_12, lambda c: c.data == 'Kat12')
	dp.register_callback_query_handler(kat_13, lambda c: c.data == 'Kat13')
